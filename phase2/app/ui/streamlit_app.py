import streamlit as st
import requests
import json
import time
import uuid
import os
from typing import Dict, Any, List, Optional
import re
from datetime import datetime
import logging
import inspect

# Configurer le logging
os.makedirs("logs/ui", exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s | %(levelname)s | %(filename)s:%(funcName)s:%(lineno)d - %(message)s',
    handlers=[
        logging.FileHandler("logs/ui/streamlit_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

logger.info("D√©marrage de l'application Streamlit")

# Configuration de la page
st.set_page_config(
    page_title="Medical Services Chatbot",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Variables pour les APIs
API_BASE_URL = "http://localhost:8000"
PROFILE_ENDPOINT = f"{API_BASE_URL}/api/v1/profile"
QA_ENDPOINT = f"{API_BASE_URL}/api/v1/qa"

def check_api_connection() -> bool:
    """Checks if the API is accessible."""
    logger.debug("V√©rification de la connexion √† l'API")
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        logger.info(f"Statut de la connexion API: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        logger.error(f"Erreur de connexion √† l'API: {str(e)}")
        return False

# V√©rifier la connexion √† l'API
if not check_api_connection():
    st.error("The API is not accessible. Please verify that the server is running.")
    logger.error("API inaccessible. Application arr√™t√©e.")
    st.stop()

logger.debug("Initialisation des variables de session")

# Fonction pour logger l'√©tat de la session
def log_session_state():
    """Log l'√©tat actuel de la session"""
    logger.debug(f"SESSION_ID: {st.session_state.get('session_id', 'non d√©fini')}")
    logger.debug(f"MODE: {st.session_state.get('mode', 'non d√©fini')}")
    logger.debug(f"√âTAPE COURANTE: {st.session_state.get('current_step', 'non d√©finie')}")
    logger.debug(f"PROFILE COMPLET: {st.session_state.get('profile_complete', False)}")
    logger.debug(f"DERNIER MESSAGE: {st.session_state.get('last_message_content', 'aucun')}")
    logger.debug(f"DERNIER HORODATAGE: {st.session_state.get('last_message_time', 0)}")
    
    # Log le nombre de messages dans l'historique
    messages = st.session_state.get('conversation_history', {}).get('messages', [])
    logger.debug(f"NOMBRE DE MESSAGES: {len(messages)}")
    
    if len(messages) > 0:
        logger.debug("DERNIER MESSAGE DE L'HISTORIQUE:")
        logger.debug(f"  Role: {messages[-1].get('role', 'inconnu')}")
        logger.debug(f"  Contenu: {messages[-1].get('content', 'vide')[:50]}...")

# Initialisation des variables de session
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
    logger.info(f"Nouvelle session cr√©√©e avec ID: {st.session_state.session_id}")

if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = {"messages": []}
    logger.debug("Historique de conversation initialis√©")

if "user_profile" not in st.session_state:
    st.session_state.user_profile = {}
    logger.debug("Profil utilisateur initialis√©")

if "profile_complete" not in st.session_state:
    st.session_state.profile_complete = False
    logger.debug("√âtat du profil initialis√© √† incomplet")

if "mode" not in st.session_state:
    st.session_state.mode = "profile"  # 'profile' ou 'qa'
    logger.debug("Mode initial d√©fini sur 'profile'")

if "current_step" not in st.session_state:
    st.session_state.current_step = "collecting_first_name"
    logger.debug("√âtape initiale d√©finie sur 'collecting_first_name'")

if "initialized" not in st.session_state:
    st.session_state.initialized = False
    # Ajouter un message d'accueil initial sans appeler l'API
    st.session_state.conversation_history["messages"] = [{
        "role": "assistant", 
        "content": "Hello! Let's start by getting to know you a bit better. Could you please tell me your first name?"
    }]
    st.session_state.initialized = True
    logger.info("Message d'accueil initial ajout√© √† l'historique")

# Ajouter une variable pour √©viter les soumissions dupliqu√©es
if "last_message_time" not in st.session_state:
    st.session_state.last_message_time = 0
    logger.debug("Variable last_message_time initialis√©e")

if "last_message_content" not in st.session_state:
    st.session_state.last_message_content = ""
    logger.debug("Variable last_message_content initialis√©e")

# Ajouter une variable pour tracker si un message a √©t√© soumis dans cette session
if "message_submitted" not in st.session_state:
    st.session_state.message_submitted = False
    logger.debug("Variable message_submitted initialis√©e")

# Ajouter un compteur pour g√©n√©rer des cl√©s de formulaire uniques
if "form_key_counter" not in st.session_state:
    st.session_state.form_key_counter = 0
    logger.debug("Variable form_key_counter initialis√©e")

# Logger l'√©tat initial de la session
log_session_state()

def detect_language(text: str) -> str:
    """Detects if text is primarily in Hebrew or English."""
    # Plages Unicode pour l'h√©breu
    hebrew_chars = ['\u0590', '\u05FF']
    
    # Compter les caract√®res h√©breux
    hebrew_count = sum(1 for char in text if hebrew_chars[0] <= char <= hebrew_chars[1])
    
    # Si plus de 30% des caract√®res sont h√©breux, consid√©rer comme de l'h√©breu
    if hebrew_count > 0.3 * len(text):
        return 'he'
    return 'en'

def is_rtl(text: str) -> bool:
    """Detects if text should be displayed right-to-left."""
    return detect_language(text) == 'he'

def format_time(timestamp: Optional[str] = None) -> str:
    """Formats a timestamp to local time."""
    if timestamp is None:
        now = datetime.now()
    else:
        try:
            now = datetime.fromisoformat(timestamp)
        except:
            now = datetime.now()
    
    return now.strftime("%H:%M")

def call_api(endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """Calls the API with the provided data."""
    caller_frame = inspect.currentframe().f_back
    caller_function = caller_frame.f_code.co_name if caller_frame else "unknown"
    
    logger.debug(f"Appel API depuis {caller_function} vers {endpoint}")
    headers = {
        "Content-Type": "application/json",
        "X-Session-ID": st.session_state.session_id
    }
    
    try:
        logger.debug(f"Donn√©es envoy√©es √† l'API: {json.dumps(data)[:100]}...")
        
        response = requests.post(
            endpoint,
            headers=headers,
            data=json.dumps(data),
            timeout=60
        )
        
        # V√©rifier si la requ√™te a r√©ussi
        response.raise_for_status()
        
        logger.debug(f"R√©ponse API re√ßue: {response.status_code}")
        return response.json()
    
    except requests.RequestException as e:
        logger.error(f"Erreur de communication avec l'API: {str(e)}")
        st.error(f"Error communicating with the API: {str(e)}")
        return {
            "response": "I'm sorry, there was an error communicating with the server. Please try again later.",
            "updated_conversation_history": data.get("conversation_history", {"messages": []}),
            "metadata": {"error": str(e)}
        }

def process_profile_message(user_message: str) -> None:
    """Processes a message for profile collection."""
    try:
        # Sauvegarder l'√©tat actuel pour comparaison
        previous_step = st.session_state.current_step
        
        # CORRECTION: Conserver l'historique actuel pour √©viter les doublons
        current_messages = [msg.copy() for msg in st.session_state.conversation_history["messages"]]
        
        # Ajouter le message utilisateur √† l'historique local avant d'appeler l'API
        st.session_state.conversation_history["messages"].append({
            "role": "user",
            "content": user_message
        })
        
        # Pr√©parer les donn√©es pour l'API
        data = {
            "user_message": user_message,
            "conversation_history": {"messages": current_messages},  # Envoyer l'historique SANS le nouveau message
            "partial_profile": st.session_state.user_profile,
            "current_step": st.session_state.current_step
        }
        
        # Appeler l'API
        response = call_api(PROFILE_ENDPOINT, data)
        
        # V√©rifier si la r√©ponse est valide
        if not response or "response" not in response:
            st.error("Invalid API response")
            return
        
        # Ajouter uniquement la r√©ponse de l'assistant √† l'historique
        st.session_state.conversation_history["messages"].append({
            "role": "assistant",
            "content": response["response"]
        })
        
        # Mettre √† jour le profil si disponible
        if "metadata" in response and "updated_profile" in response["metadata"]:
            st.session_state.user_profile = response["metadata"]["updated_profile"]
            logger.info(f"Profil mis √† jour: {st.session_state.user_profile}")
        
        # Mettre √† jour l'√©tape actuelle si disponible
        if "metadata" in response and "next_step" in response["metadata"]:
            new_step = response["metadata"]["next_step"]
            
            # Journaliser le changement d'√©tape
            if new_step != previous_step:
                logger.info(f"Changement d'√©tape: {previous_step} -> {new_step}")
            
            st.session_state.current_step = new_step
            
            # V√©rifier si le profil est complet
            if st.session_state.current_step == "confirmation":
                st.session_state.profile_complete = True
                logger.info("Profil utilisateur complet!")
                
                # Si le profil est complet et que nous recevons une confirmation, proposer de passer en mode QA
                if user_message.upper() in ["YES", "Y", "OUI"] and st.session_state.profile_complete:
                    # Notifier l'utilisateur que nous changeons de mode
                    logger.info("Profil confirm√©, passage automatique en mode Q&A")
                    
                    # Ajouter un message √† l'historique pour informer du changement de mode
                    st.session_state.conversation_history["messages"].append({
                        "role": "assistant",
                        "content": "Your profile is now complete! I'm switching to Q&A mode to help answer your questions about medical services."
                    })
                    
                    # Changer le mode apr√®s avoir ajout√© le message (affectera le prochain cycle)
                    st.session_state.mode = "qa"
        
        # R√©initialiser le flag de soumission
        st.session_state.message_submitted = False
        
        # Logger l'√©tat de la session apr√®s traitement
        logger.debug("√âtat de la session apr√®s traitement du message:")
        log_session_state()
        
        # Toujours forcer un rerun apr√®s traitement pour actualiser l'interface
        st.experimental_rerun()
        
    except Exception as e:
        st.error(f"Error processing message: {str(e)}")
        logger.error(f"Error in process_profile_message: {str(e)}")

def process_qa_message(user_message: str) -> None:
    """Processes a question and generates an answer."""
    try:
        # CORRECTION: Conserver l'historique actuel pour √©viter les doublons
        current_messages = [msg.copy() for msg in st.session_state.conversation_history["messages"]]
        
        # Ajouter le message utilisateur √† l'historique local avant d'appeler l'API
        st.session_state.conversation_history["messages"].append({
            "role": "user",
            "content": user_message
        })
        
        # Pr√©parer les donn√©es pour l'API
        data = {
            "user_message": user_message,
            "conversation_history": {"messages": current_messages},  # Envoyer l'historique SANS le nouveau message
            "user_profile": st.session_state.user_profile
        }
        
        # Appeler l'API
        response = call_api(QA_ENDPOINT, data)
        
        # V√©rifier si la r√©ponse est valide
        if not response or "response" not in response:
            st.error("Invalid API response")
            return
        
        # Ajouter uniquement la r√©ponse de l'assistant √† l'historique
        st.session_state.conversation_history["messages"].append({
            "role": "assistant",
            "content": response["response"]
        })
        
        # R√©initialiser le flag de soumission
        st.session_state.message_submitted = False
        
        # Forcer un rerun Streamlit pour rafra√Æchir l'interface
        st.experimental_rerun()
            
    except Exception as e:
        st.error(f"Error processing message: {str(e)}")
        logger.error(f"Error in process_qa_message: {str(e)}")

def reset_session() -> None:
    """Completely resets the session."""
    logger.info("R√©initialisation de la session")
    # Conserver uniquement l'ID de session
    session_id = st.session_state.session_id
    
    # Effacer toutes les variables de session
    for key in list(st.session_state.keys()):
        if key != "session_id":
            del st.session_state[key]
    
    # R√©initialiser les variables de base
    st.session_state.conversation_history = {"messages": []}
    st.session_state.user_profile = {}
    st.session_state.profile_complete = False
    st.session_state.mode = "profile"
    st.session_state.current_step = "collecting_first_name"
    st.session_state.initialized = False
    st.session_state.last_message_time = 0
    st.session_state.last_message_content = ""
    st.session_state.message_submitted = False
    # R√©initialiser le compteur de cl√© de formulaire
    st.session_state.form_key_counter = 0
    
    # Ajouter un message d'accueil initial
    st.session_state.conversation_history["messages"] = [{
        "role": "assistant", 
        "content": "Hello! Let's start by getting to know you a bit better. Could you please tell me your first name?"
    }]
    st.session_state.initialized = True
    logger.info("Session r√©initialis√©e avec succ√®s")
    log_session_state()

def change_mode(new_mode: str) -> None:
    """Changes the application mode."""
    logger.info(f"Changement de mode: {st.session_state.mode} -> {new_mode}")
    if new_mode == "qa" and not st.session_state.profile_complete:
        logger.warning("Tentative de passage en mode Q&A avec un profil incomplet")
        st.warning("Please complete your profile before using Q&A mode.")
        return
    
    old_mode = st.session_state.mode
    st.session_state.mode = new_mode
    
    if new_mode == "profile" and old_mode == "qa":
        # R√©initialiser l'historique pour le mode profil
        st.session_state.conversation_history = {"messages": []}
        st.session_state.initialized = False
        # Ajouter un message d'accueil initial
        st.session_state.conversation_history["messages"] = [{
            "role": "assistant", 
            "content": "Hello! Let's start by getting to know you a bit better. Could you please tell me your first name?"
        }]
        st.session_state.initialized = True
        logger.debug("Historique r√©initialis√© pour le mode profil")
    elif new_mode == "qa" and old_mode == "profile":
        # Conserver l'historique existant et ajouter uniquement le message de transition
        st.session_state.conversation_history["messages"].append({
            "role": "assistant", 
            "content": "I'm ready to answer your questions about medical services based on your profile information. What would you like to know?"
        })
        logger.debug("Message de transition ajout√© pour le mode Q&A")
    
    # R√©initialiser les variables de contr√¥le des messages dupliqu√©s
    st.session_state.last_message_time = 0
    st.session_state.last_message_content = ""
    st.session_state.message_submitted = False
    # R√©initialiser le compteur de cl√© de formulaire
    st.session_state.form_key_counter = 0
    logger.debug("Variables de contr√¥le des messages dupliqu√©s r√©initialis√©es")
    log_session_state()

# Functions for message display
def st_message(message, is_user=False, key=None):
    """Display a chat message with appropriate styling."""
    message_container = st.container()
    
    with message_container:
        if is_user:
            st.markdown(f'<div class="user-message">You: {message}</div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="assistant-message">Assistant: {message}</div>', unsafe_allow_html=True)

# Interface utilisateur
st.title("Medical Services Chatbot")

# Barre lat√©rale pour le changement de mode
with st.sidebar:
    st.header("Options")
    
    # Afficher le profil utilisateur s'il est complet
    if st.session_state.profile_complete:
        st.subheader("User Profile")
        st.write(f"**Name:** {st.session_state.user_profile.get('first_name', '')} {st.session_state.user_profile.get('last_name', '')}")
        st.write(f"**ID:** {st.session_state.user_profile.get('id_number', '')}")
        st.write(f"**Age:** {st.session_state.user_profile.get('age', '')}")
        st.write(f"**HMO:** {st.session_state.user_profile.get('hmo_name', '')}")
        st.write(f"**Insurance:** {st.session_state.user_profile.get('insurance_tier', '')}")
        
        # Bouton pour changer de mode
        if st.session_state.mode == "profile":
            if st.button("Switch to Q&A Mode"):
                change_mode("qa")
        else:
            if st.button("Return to Profile Mode"):
                change_mode("profile")
    
    # Bouton de r√©initialisation
    if st.button("Reset Conversation"):
        reset_session()

# Conteneur principal pour l'affichage de la conversation
chat_container = st.container()

# Afficher l'historique de conversation
with chat_container:
    # Afficher les messages de l'historique
    messages = st.session_state.conversation_history.get("messages", [])
    for i, message in enumerate(messages):
        if message["role"] == "user":
            st_message(message["content"], is_user=True, key=f"user_{i}")
        else:
            st_message(message["content"], is_user=False, key=f"assistant_{i}")

# Conteneur pour le champ de saisie
input_container = st.container()

# Champ de saisie pour l'utilisateur
with input_container:
    # Utiliser un formulaire avec une cl√© dynamique pour forcer le rechargement du formulaire
    form_key = f"message_form_{st.session_state.form_key_counter}"
    with st.form(key=form_key):
        user_input = st.text_input("Your message:", key=f"user_input_{st.session_state.form_key_counter}")
        submit_button = st.form_submit_button("Send")
        
        # Traiter l'entr√©e de l'utilisateur uniquement lorsque le formulaire est soumis
        if submit_button and user_input and not st.session_state.message_submitted:
            logger.debug(f"Formulaire soumis avec le message: '{user_input}'")
            current_time = time.time()
            
            # Log les informations de contr√¥le des doublons
            logger.debug(f"Temps √©coul√© depuis le dernier message: {current_time - st.session_state.last_message_time:.2f}s")
            logger.debug(f"Message pr√©c√©dent: '{st.session_state.last_message_content}'")
            logger.debug(f"Message actuel: '{user_input}'")
            logger.debug(f"Messages identiques: {user_input == st.session_state.last_message_content}")
            
            # Marquer le message comme soumis pour √©viter les doubles soumissions
            st.session_state.message_submitted = True
            
            # Mettre √† jour les variables de contr√¥le
            st.session_state.last_message_time = current_time
            st.session_state.last_message_content = user_input
            
            # Incr√©menter le compteur de cl√© de formulaire pour le prochain cycle
            st.session_state.form_key_counter += 1
            logger.debug(f"Compteur de formulaire incr√©ment√©: {st.session_state.form_key_counter}")
            
            # Traiter le message
            if st.session_state.mode == "profile":
                process_profile_message(user_input)
            else:
                process_qa_message(user_input)
            
            # Logger l'√©tat de la session apr√®s traitement
            logger.debug("√âtat de la session apr√®s traitement du message:")
            log_session_state()

            # R√©initialiser le flag de soumission mais ne pas changer le compteur ici
            st.session_state.message_submitted = False
            
            # Forcer un rerun Streamlit pour rafra√Æchir l'interface
            st.experimental_rerun()

# CSS personnalis√©
st.markdown("""
<style>
.user-message {
    background-color: #e6f7ff;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    text-align: right;
}
.assistant-message {
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
}
.stTextArea textarea {
    direction: auto;
}
</style>
""", unsafe_allow_html=True) 