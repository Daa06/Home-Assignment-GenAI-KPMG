#!/usr/bin/env python3
"""
Script de test pour l'application Medical Services Chatbot.
Ce script simule les interactions utilisateur pour identifier les probl√®mes.
"""

import requests
import json
import time
import uuid
import sys
import os

# Configuration
API_URL = "http://localhost:8000"
PROFILE_ENDPOINT = f"{API_URL}/api/v1/profile"
QA_ENDPOINT = f"{API_URL}/api/v1/qa"
HEALTH_ENDPOINT = f"{API_URL}/health"

# Donn√©es de test
TEST_USER_INFO = {
    "first_name": "Daniel",
    "last_name": "Dahan",
    "id_number": "111111111",
    "gender": "MALE",
    "age": 22,
    "hmo_name": "◊õ◊ú◊ú◊ô◊™",
    "hmo_card_number": "111123123",
    "insurance_tier": "◊õ◊°◊£"
}

# Cr√©er un identifiant de session
session_id = str(uuid.uuid4())
print(f"ID de session de test: {session_id}")

def check_api_health():
    """V√©rifie si l'API est en ligne."""
    try:
        response = requests.get(HEALTH_ENDPOINT, timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ API en ligne")
            return True
        else:
            print(f"‚ùå API hors ligne (status code: {response.status_code})")
            return False
    except requests.RequestException as e:
        print(f"‚ùå Erreur de connexion √† l'API: {str(e)}")
        return False

def call_profile_api(message, history, profile_data, current_step):
    """Appelle l'API de profil avec les donn√©es fournies."""
    headers = {
        "Content-Type": "application/json",
        "X-Session-ID": session_id
    }
    
    data = {
        "user_message": message,
        "conversation_history": history,
        "partial_profile": profile_data,
        "current_step": current_step
    }
    
    try:
        print(f"\nüì§ Envoi √† l'API: Message '{message}', √âtape '{current_step}'")
        response = requests.post(
            PROFILE_ENDPOINT,
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"üì• R√©ponse API re√ßue:")
            print(f"  - Message: \"{response_data.get('response', 'Pas de r√©ponse')[:50]}...\"")
            if 'metadata' in response_data:
                metadata = response_data['metadata']
                print(f"  - Prochaine √©tape: {metadata.get('next_step', 'Inconnue')}")
                if 'updated_profile' in metadata:
                    print(f"  - Profil mis √† jour: {metadata['updated_profile']}")
            return response_data
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            print(response.text)
            return None
            
    except requests.RequestException as e:
        print(f"‚ùå Erreur API: {str(e)}")
        return None

def simulate_profile_collection():
    """Simule la collecte de profil compl√®te."""
    print("\nüîÑ D√©marrage de la simulation de collecte de profil...\n")
    
    # Initialiser les donn√©es
    history = {"messages": []}
    profile = {}
    current_step = "collecting_first_name"
    
    # D√©finir l'ordre des √©tapes et les messages correspondants
    steps = [
        ("collecting_first_name", TEST_USER_INFO["first_name"], "collecting_last_name"),
        ("collecting_last_name", TEST_USER_INFO["last_name"], "collecting_id_number"),
        ("collecting_id_number", TEST_USER_INFO["id_number"], "collecting_gender"),
        ("collecting_gender", TEST_USER_INFO["gender"], "collecting_age"),
        ("collecting_age", str(TEST_USER_INFO["age"]), "collecting_hmo_name"),
        ("collecting_hmo_name", TEST_USER_INFO["hmo_name"], "collecting_hmo_card_number"),
        ("collecting_hmo_card_number", TEST_USER_INFO["hmo_card_number"], "collecting_insurance_tier"),
        ("collecting_insurance_tier", TEST_USER_INFO["insurance_tier"], "confirmation"),
        ("confirmation", "YES", "confirmation")
    ]
    
    for i, (step, user_message, expected_next_step) in enumerate(steps):
        print(f"\nüìä Test {i+1}/{len(steps)}: √âtape '{step}' ‚Üí Message '{user_message}'")
        
        # V√©rifier que l'√©tape actuelle correspond √† celle attendue
        if step != current_step:
            print(f"‚ùå Erreur: √âtape actuelle '{current_step}' ne correspond pas √† l'√©tape attendue '{step}'")
            return False
        
        # Appeler l'API
        response = call_profile_api(user_message, history, profile, current_step)
        
        if not response:
            print("‚ùå √âchec de l'appel API")
            return False
        
        # Mettre √† jour l'historique avec le message utilisateur
        history["messages"].append({"role": "user", "content": user_message})
        
        # Mettre √† jour l'historique avec la r√©ponse
        history["messages"].append({"role": "assistant", "content": response["response"]})
        
        # Mettre √† jour le profil
        if "metadata" in response and "updated_profile" in response["metadata"]:
            profile = response["metadata"]["updated_profile"]
        
        # Mettre √† jour l'√©tape actuelle
        if "metadata" in response and "next_step" in response["metadata"]:
            current_step = response["metadata"]["next_step"]
            
            # V√©rifier que l'√©tape suivante correspond √† celle attendue
            if current_step != expected_next_step:
                print(f"‚ùå Erreur: √âtape suivante '{current_step}' ne correspond pas √† l'√©tape attendue '{expected_next_step}'")
                return False
            
            print(f"‚úÖ Passage √† l'√©tape: {current_step}")
        else:
            print(f"‚ùå Erreur: Pas d'√©tape suivante dans la r√©ponse")
            return False
        
        # Pause pour simuler l'interaction utilisateur
        time.sleep(1)
    
    print("\n‚úÖ Simulation de collecte de profil termin√©e avec succ√®s")
    print(f"Profil final: {profile}")
    return True

def test_qa_mode():
    """Teste le mode Q&A apr√®s la collecte de profil."""
    print("\nüîÑ Test du mode Q&A...\n")
    
    # Initialiser les donn√©es
    history = {"messages": []}
    
    # Appeler l'API avec une question de test
    headers = {
        "Content-Type": "application/json",
        "X-Session-ID": session_id
    }
    
    test_question = "Tell me about my coverage for dental care"
    
    data = {
        "user_message": test_question,
        "conversation_history": history,
        "user_profile": TEST_USER_INFO
    }
    
    try:
        print(f"\nüì§ Envoi de question √† l'API: '{test_question}'")
        response = requests.post(
            QA_ENDPOINT,
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"üì• R√©ponse API re√ßue:")
            print(f"  - R√©ponse: \"{response_data.get('response', 'Pas de r√©ponse')[:100]}...\"")
            return True
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            print(response.text)
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå Erreur API: {str(e)}")
        return False

def main():
    """Fonction principale du script de test."""
    print("üîç D√©marrage des tests de l'application Medical Services Chatbot\n")
    
    # V√©rifier que l'API est en ligne
    if not check_api_health():
        print("‚ùå Impossible de se connecter √† l'API. Tests annul√©s.")
        sys.exit(1)
        
    # Test de collecte de profil
    if simulate_profile_collection():
        print("\n‚úÖ Test de collecte de profil r√©ussi")
    else:
        print("\n‚ùå Test de collecte de profil √©chou√©")
        sys.exit(1)
        
    # Test du mode Q&A
    if test_qa_mode():
        print("\n‚úÖ Test du mode Q&A r√©ussi")
    else:
        print("\n‚ùå Test du mode Q&A √©chou√©")
        sys.exit(1)
        
    print("\nüéâ Tous les tests ont r√©ussi!")

if __name__ == "__main__":
    main() 